{"ast":null,"code":"import _objectSpread from\"/Users/marina/Frontend/projects/js-react-projects/goit-react-hw-06-phonebook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _objectWithoutProperties from\"/Users/marina/Frontend/projects/js-react-projects/goit-react-hw-06-phonebook/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import React from'react';import{connect}from'react-redux';import contactsActions from'../../../redux/contacts-actions';import ContactsListItem from'../ContactListItem';import{jsx as _jsx}from\"react/jsx-runtime\";function ContactList(_ref){var contacts=_ref.contacts,onDeleteContact=_ref.onDeleteContact;var contactElements=contacts.map(function(_ref2,idx){var id=_ref2.id,props=_objectWithoutProperties(_ref2,[\"id\"]);return/*#__PURE__*/_jsx(ContactsListItem,_objectSpread(_objectSpread({},props),{},{onClick:function onClick(){return onDeleteContact(idx);}}),id);});return/*#__PURE__*/_jsx(\"ul\",{children:contactElements});};var getVisibleContacts=function getVisibleContacts(allContacts,filter){var normalizedFilter=filter.toLowerCase();return allContacts.filter(function(_ref3){var name=_ref3.name;return name.toLowerCase().includes(normalizedFilter);});};var mapStateToProps=function mapStateToProps(_ref4){var _ref4$contacts=_ref4.contacts,items=_ref4$contacts.items,filter=_ref4$contacts.filter;return{contacts:getVisibleContacts(items,filter)};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{onDeleteContact:function onDeleteContact(idx){return dispatch(contactsActions.deleteContact(idx));}};};export default connect(mapStateToProps,mapDispatchToProps)(ContactList);","map":{"version":3,"sources":["/Users/marina/Frontend/projects/js-react-projects/goit-react-hw-06-phonebook/src/client/components/ContactList/ContactList.jsx"],"names":["React","connect","contactsActions","ContactsListItem","ContactList","contacts","onDeleteContact","contactElements","map","idx","id","props","getVisibleContacts","allContacts","filter","normalizedFilter","toLowerCase","name","includes","mapStateToProps","items","mapDispatchToProps","dispatch","deleteContact"],"mappings":"yZAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,OAAT,KAAwB,aAAxB,CACA,MAAOC,CAAAA,eAAP,KAA4B,iCAA5B,CAEA,MAAOC,CAAAA,gBAAP,KAA6B,oBAA7B,C,2CAIA,QAASC,CAAAA,WAAT,MAAkD,IAA5BC,CAAAA,QAA4B,MAA5BA,QAA4B,CAAlBC,eAAkB,MAAlBA,eAAkB,CAChD,GAAMC,CAAAA,eAAe,CAAGF,QAAQ,CAACG,GAAT,CAAa,eAAmBC,GAAnB,KAAGC,CAAAA,EAAH,OAAGA,EAAH,CAAUC,KAAV,2DACjC,KAAC,gBAAD,gCAAgCA,KAAhC,MAAuC,OAAO,CAAE,yBAAKL,CAAAA,eAAe,CAACG,GAAD,CAApB,EAAhD,GAAuBC,EAAvB,CADiC,EAAb,CAAxB,CAKE,mBACI,oBACKH,eADL,EADJ,CAKH,EAED,GAAMK,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,WAAD,CAAcC,MAAd,CAAyB,CAClD,GAAMC,CAAAA,gBAAgB,CAAGD,MAAM,CAACE,WAAP,EAAzB,CACA,MAAOH,CAAAA,WAAW,CAACC,MAAZ,CAAmB,mBAAGG,CAAAA,IAAH,OAAGA,IAAH,OAAcA,CAAAA,IAAI,CAACD,WAAL,GAAmBE,QAAnB,CAA4BH,gBAA5B,CAAd,EAAnB,CAAP,CAEC,CAJH,CAMA,GAAMI,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,iCAAGd,QAAH,CAAee,KAAf,gBAAeA,KAAf,CAAsBN,MAAtB,gBAAsBA,MAAtB,OAAsC,CAC1DT,QAAQ,CAAEO,kBAAkB,CAACQ,KAAD,CAAQN,MAAR,CAD8B,CAAtC,EAAxB,CAMA,GAAMO,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAAAC,QAAQ,QAAK,CACtChB,eAAe,CAAE,yBAACG,GAAD,QAASa,CAAAA,QAAQ,CAAEpB,eAAe,CAACqB,aAAhB,CAA8Bd,GAA9B,CAAF,CAAjB,EADqB,CAAL,EAAnC,CAKA,cAAeR,CAAAA,OAAO,CAACkB,eAAD,CAAkBE,kBAAlB,CAAP,CAA6CjB,WAA7C,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport contactsActions from '../../../redux/contacts-actions'\nimport PropTypes from 'prop-types'\nimport ContactsListItem from '../ContactListItem'\n\n\n\nfunction ContactList({contacts, onDeleteContact}) {\n  const contactElements = contacts.map(({ id, ...props }, idx) => (\n      <ContactsListItem key={id}  {...props} onClick={()=> onDeleteContact(idx)}\n      />\n    ))\n        \n    return (\n        <ul>\n            {contactElements}\n        </ul>\n    )\n};\n\nconst getVisibleContacts = (allContacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n  return allContacts.filter(({ name }) => name.toLowerCase().includes(normalizedFilter));\n  \n  };\n\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\n    contacts: getVisibleContacts(items, filter)\n})\n\n\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContact: (idx) => dispatch (contactsActions.deleteContact(idx))\n}) \n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n\nContactList.propTypes = {\n    contacts: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n      }).isRequired,\n    ),\n    onDeleteContact: PropTypes.func.isRequired,\n  };\n  \n"]},"metadata":{},"sourceType":"module"}