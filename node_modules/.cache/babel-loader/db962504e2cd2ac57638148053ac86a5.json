{"ast":null,"code":"var _jsxFileName = \"/Users/marina/Frontend/projects/js-react-projects/goit-react-hw-06-phonebook/src/client/components/ContactList/ContactList.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport contactsActions from '../../../redux/contacts-actions';\nimport PropTypes from 'prop-types';\nimport ContactsListItem from '../ContactListItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ContactList({\n  contacts,\n  onDeleteContacts\n}) {\n  const contactElements = contacts.map(({\n    id,\n    ...props\n  }) => /*#__PURE__*/_jsxDEV(ContactsListItem, { ...props,\n    onClick: () => onDeleteContacts(id)\n  }, id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 7\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: contactElements\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 9\n  }, this);\n}\n\n_c = ContactList;\n; // const getVisibleContacts = (allContacts, filter) => {\n//     const normalizedFilter = filter.toLowerCase();\n//     return allContacts.filter(({name}) => name.toLowerCase().includes(normalizedFilter));\n//   };\n// const mapStateToProps = ({ contacts: { items, filter}}) => ({\n//   contacts: getVisibleContacts(items, filter)\n// })\n\nconst mapStateToProps = state => {\n  const {\n    filter,\n    items\n  } = state.contacts;\n  const normalizedFilter = filter.toLowerCase();\n  const filteredContacts = items.filter(item => item.name.toLowerCase().includes(normalizedFilter));\n  return {\n    item: filteredContacts\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContacts: id => dispatch(contactsActions.deleteContacts(id))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired\n  }).isRequired),\n  onDeleteContacts: PropTypes.func.isRequired\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactList\");","map":{"version":3,"sources":["/Users/marina/Frontend/projects/js-react-projects/goit-react-hw-06-phonebook/src/client/components/ContactList/ContactList.jsx"],"names":["React","connect","contactsActions","PropTypes","ContactsListItem","ContactList","contacts","onDeleteContacts","contactElements","map","id","props","mapStateToProps","state","filter","items","normalizedFilter","toLowerCase","filteredContacts","item","name","includes","mapDispatchToProps","dispatch","deleteContacts","propTypes","arrayOf","shape","string","isRequired","number","func"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,eAAP,MAA4B,iCAA5B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;;;AAIA,SAASC,WAAT,CAAqB;AAACC,EAAAA,QAAD;AAAWC,EAAAA;AAAX,CAArB,EAAmD;AACjD,QAAMC,eAAe,GAAGF,QAAQ,CAACG,GAAT,CAAa,CAAC;AAAEC,IAAAA,EAAF;AAAM,OAAGC;AAAT,GAAD,kBACjC,QAAC,gBAAD,OAAgCA,KAAhC;AAAuC,IAAA,OAAO,EAAE,MAAKJ,gBAAgB,CAACG,EAAD;AAArE,KAAuBA,EAAvB;AAAA;AAAA;AAAA;AAAA,UADoB,CAAxB;AAKE,sBACI;AAAA,cACKF;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;KAXQH,W;AAWR,C,CAED;AACA;AAEA;AACA;AAEA;AACA;AACA;;AAEA,MAAMO,eAAe,GAAIC,KAAD,IAAW;AAC/B,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAoBF,KAAK,CAACP,QAAhC;AACA,QAAMU,gBAAgB,GAAGF,MAAM,CAACG,WAAP,EAAzB;AACA,QAAMC,gBAAgB,GAAGH,KAAK,CAACD,MAAN,CAAaK,IAAI,IAAIA,IAAI,CAACC,IAAL,CAAUH,WAAV,GAAwBI,QAAxB,CAAiCL,gBAAjC,CAArB,CAAzB;AACA,SAAO;AACHG,IAAAA,IAAI,EAAED;AADH,GAAP;AAGH,CAPD;;AASA,MAAMI,kBAAkB,GAAGC,QAAQ,KAAK;AACtChB,EAAAA,gBAAgB,EAAGG,EAAD,IAAQa,QAAQ,CAAErB,eAAe,CAACsB,cAAhB,CAA+Bd,EAA/B,CAAF;AADI,CAAL,CAAnC;;AAKA,eAAeT,OAAO,CAACW,eAAD,EAAkBU,kBAAlB,CAAP,CAA6CjB,WAA7C,CAAf;AAEAA,WAAW,CAACoB,SAAZ,GAAwB;AACpBnB,EAAAA,QAAQ,EAAEH,SAAS,CAACuB,OAAV,CACRvB,SAAS,CAACwB,KAAV,CAAgB;AACdjB,IAAAA,EAAE,EAAEP,SAAS,CAACyB,MAAV,CAAiBC,UADP;AAEdT,IAAAA,IAAI,EAAEjB,SAAS,CAACyB,MAAV,CAAiBC,UAFT;AAGdC,IAAAA,MAAM,EAAE3B,SAAS,CAACyB,MAAV,CAAiBC;AAHX,GAAhB,EAIGA,UALK,CADU;AAQpBtB,EAAAA,gBAAgB,EAAEJ,SAAS,CAAC4B,IAAV,CAAeF;AARb,CAAxB","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport contactsActions from '../../../redux/contacts-actions'\nimport PropTypes from 'prop-types'\nimport ContactsListItem from '../ContactListItem'\n\n\n\nfunction ContactList({contacts, onDeleteContacts}) {\n  const contactElements = contacts.map(({ id, ...props }) => (\n      <ContactsListItem key={id}  {...props} onClick={()=> onDeleteContacts(id)}\n      />\n    ))\n        \n    return (\n        <ul>\n            {contactElements}\n        </ul>\n    )\n};\n\n// const getVisibleContacts = (allContacts, filter) => {\n//     const normalizedFilter = filter.toLowerCase();\n    \n//     return allContacts.filter(({name}) => name.toLowerCase().includes(normalizedFilter));\n//   };\n\n// const mapStateToProps = ({ contacts: { items, filter}}) => ({\n//   contacts: getVisibleContacts(items, filter)\n// })\n\nconst mapStateToProps = (state) => {\n    const { filter, items } = state.contacts;\n    const normalizedFilter = filter.toLowerCase();\n    const filteredContacts = items.filter(item => item.name.toLowerCase().includes(normalizedFilter))\n    return {\n        item: filteredContacts,\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContacts: (id) => dispatch (contactsActions.deleteContacts(id))\n}) \n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n\nContactList.propTypes = {\n    contacts: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n      }).isRequired,\n    ),\n    onDeleteContacts: PropTypes.func.isRequired,\n  };\n  \n"]},"metadata":{},"sourceType":"module"}