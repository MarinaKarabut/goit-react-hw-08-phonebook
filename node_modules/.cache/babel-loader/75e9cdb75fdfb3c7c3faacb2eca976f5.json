{"ast":null,"code":"var _jsxFileName = \"/Users/marina/Frontend/projects/js-react-projects/goit-react-hw-08-phonebook/src/client/Contacts/components/ContactList/ContactList.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { deleteContact } from '../../../../redux/contacts/contacts-operations';\nimport { getVisibleContacts } from '../../../../redux/contacts/selectors';\nimport PropTypes from 'prop-types';\nimport ContactsListItem from '../ContactListItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ContactList({\n  contacts,\n  onDeleteContact\n}) {\n  const contactElements = contacts.map(({\n    id,\n    ...props\n  }) => /*#__PURE__*/_jsxDEV(ContactsListItem, { ...props,\n    onClick: () => onDeleteContact(id)\n  }, id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 7\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: contactElements\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 9\n  }, this);\n}\n\n_c = ContactList;\n;\n\nconst mapStateToProps = state => ({\n  contacts: getVisibleContacts(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContact: id => dispatch(deleteContact(id))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired\n  }).isRequired),\n  onDeleteContact: PropTypes.func.isRequired\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactList\");","map":{"version":3,"sources":["/Users/marina/Frontend/projects/js-react-projects/goit-react-hw-08-phonebook/src/client/Contacts/components/ContactList/ContactList.jsx"],"names":["React","connect","deleteContact","getVisibleContacts","PropTypes","ContactsListItem","ContactList","contacts","onDeleteContact","contactElements","map","id","props","mapStateToProps","state","mapDispatchToProps","dispatch","propTypes","arrayOf","shape","string","isRequired","name","number","func"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,aAAT,QAA8B,gDAA9B;AACA,SAASC,kBAAT,QAAkC,sCAAlC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;;;AAIA,SAASC,WAAT,CAAqB;AAACC,EAAAA,QAAD;AAAWC,EAAAA;AAAX,CAArB,EAAkD;AAChD,QAAMC,eAAe,GAAGF,QAAQ,CAACG,GAAT,CAAa,CAAC;AAAEC,IAAAA,EAAF;AAAM,OAAGC;AAAT,GAAD,kBACjC,QAAC,gBAAD,OAAgCA,KAAhC;AAAuC,IAAA,OAAO,EAAE,MAAKJ,eAAe,CAACG,EAAD;AAApE,KAAuBA,EAAvB;AAAA;AAAA;AAAA;AAAA,UADoB,CAAxB;AAKE,sBACI;AAAA,cACKF;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;KAXQH,W;AAWR;;AAGD,MAAMO,eAAe,GAAIC,KAAD,KAAY;AAChCP,EAAAA,QAAQ,EAAEJ,kBAAkB,CAACW,KAAD;AADI,CAAZ,CAAxB;;AAMA,MAAMC,kBAAkB,GAAGC,QAAQ,KAAK;AACtCR,EAAAA,eAAe,EAAGG,EAAD,IAAQK,QAAQ,CAACd,aAAa,CAACS,EAAD,CAAd;AADK,CAAL,CAAnC;;AAKA,eAAeV,OAAO,CAACY,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CT,WAA7C,CAAf;AAEAA,WAAW,CAACW,SAAZ,GAAwB;AACpBV,EAAAA,QAAQ,EAAEH,SAAS,CAACc,OAAV,CACRd,SAAS,CAACe,KAAV,CAAgB;AACdR,IAAAA,EAAE,EAAEP,SAAS,CAACgB,MAAV,CAAiBC,UADP;AAEdC,IAAAA,IAAI,EAAElB,SAAS,CAACgB,MAAV,CAAiBC,UAFT;AAGdE,IAAAA,MAAM,EAAEnB,SAAS,CAACgB,MAAV,CAAiBC;AAHX,GAAhB,EAIGA,UALK,CADU;AAQpBb,EAAAA,eAAe,EAAEJ,SAAS,CAACoB,IAAV,CAAeH;AARZ,CAAxB","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { deleteContact } from '../../../../redux/contacts/contacts-operations'\nimport { getVisibleContacts} from '../../../../redux/contacts/selectors'\nimport PropTypes from 'prop-types'\nimport ContactsListItem from '../ContactListItem'\n\n\n\nfunction ContactList({contacts, onDeleteContact}) {\n  const contactElements = contacts.map(({ id, ...props }) => (\n      <ContactsListItem key={id}  {...props} onClick={()=> onDeleteContact(id)}\n      />\n    ))\n        \n    return (\n        <ul>\n            {contactElements}\n        </ul>\n    )\n};\n\n\nconst mapStateToProps = (state) => ({\n    contacts: getVisibleContacts(state)\n})\n\n\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContact: (id) => dispatch(deleteContact(id))\n}) \n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n\nContactList.propTypes = {\n    contacts: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n      }).isRequired,\n    ),\n    onDeleteContact: PropTypes.func.isRequired,\n  };\n  \n"]},"metadata":{},"sourceType":"module"}