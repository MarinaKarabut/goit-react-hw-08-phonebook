{"ast":null,"code":"import axios from 'axios';\nimport actions from './auth-actions';\nimport moduleName from '../../shared/services/basic-http-service';\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\nconst token = {\n  set(token) {\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n  },\n\n  unset() {\n    axios.defaults.headers.common.Authorization = '';\n  }\n\n};\nexport const register = credentials => async dispatch => {\n  dispatch(actions.registerRequest());\n\n  try {\n    const {\n      data\n    } = await axios.post('/users/signup', credentials);\n    token.set(data.token);\n    dispatch(actions.registerSuccess(data));\n  } catch (error) {\n    dispatch(actions.registerError(error.message));\n  }\n};\nexport const logIn = credentials => async dispatch => {\n  dispatch(actions.loginRequest());\n\n  try {\n    const {\n      data\n    } = await axios.post('/users/login', credentials);\n    token.set(data.token);\n    dispatch(actions.loginSuccess(data));\n  } catch (error) {\n    dispatch(actions.loginError(error.message));\n  }\n};\nexport const logOut = () => async dispatch => {\n  dispatch(actions.logoutRequest());\n\n  try {\n    await axios.post('/users/logout');\n    token.unset();\n    dispatch(actions.logoutSuccess());\n  } catch (error) {\n    dispatch(actions.logoutError(error.message));\n  }\n};\nexport const getCurrentUser = () => async (dispatch, getState) => {\n  const {\n    auth: {\n      token: persistedToken\n    }\n  } = getState();\n\n  if (!persistedToken) {\n    return;\n  }\n\n  token.set(persistedToken);\n  dispatch(actions.getCurrentUserRequest());\n\n  try {\n    const {\n      data\n    } = await axios.get('/users/current');\n    dispatch(actions.getCurrentUserSuccess(data));\n  } catch (error) {\n    dispatch(actions.getCurrentUserError(error.message));\n  }\n};","map":{"version":3,"sources":["/Users/marina/Frontend/projects/js-react-projects/goit-react-hw-08-phonebook/src/redux/auth/auth-operations.js"],"names":["axios","actions","moduleName","defaults","baseURL","token","set","headers","common","Authorization","unset","register","credentials","dispatch","registerRequest","data","post","registerSuccess","error","registerError","message","logIn","loginRequest","loginSuccess","loginError","logOut","logoutRequest","logoutSuccess","logoutError","getCurrentUser","getState","auth","persistedToken","getCurrentUserRequest","get","getCurrentUserSuccess","getCurrentUserError"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nimport actions from './auth-actions';\nimport moduleName from '../../shared/services/basic-http-service';\n\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\n\nconst token = {\n  set(token) {\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n  },\n  unset() {\n    axios.defaults.headers.common.Authorization = '';\n  },\n};\n\nexport const register = credentials => async dispatch => {\n  dispatch(actions.registerRequest());\n\n  try {\n    const { data } = await axios.post('/users/signup', credentials);\n\n    token.set(data.token);\n\n    dispatch(actions.registerSuccess(data));\n  } catch (error) {\n    dispatch(actions.registerError(error.message));\n  }\n};\n\nexport const logIn = credentials => async dispatch => {\n  dispatch(actions.loginRequest());\n\n  try {\n    const { data } = await axios.post('/users/login', credentials);\n\n    token.set(data.token);\n\n    dispatch(actions.loginSuccess(data));\n  } catch (error) {\n    dispatch(actions.loginError(error.message));\n  }\n};\n\nexport const logOut = () => async dispatch => {\n  dispatch(actions.logoutRequest());\n\n  try {\n    await axios.post('/users/logout');\n\n    token.unset();\n    dispatch(actions.logoutSuccess());\n  } catch (error) {\n    dispatch(actions.logoutError(error.message));\n  }\n};\n\nexport const getCurrentUser = () => async (dispatch, getState) => {\n  const {\n    auth: { token: persistedToken },\n  } = getState();\n  if (!persistedToken) {\n    return;\n  }\n\n  token.set(persistedToken);\n\n  dispatch(actions.getCurrentUserRequest());\n  try {\n    const { data } = await axios.get('/users/current');\n    dispatch(actions.getCurrentUserSuccess(data));\n  } catch (error) {\n    dispatch(actions.getCurrentUserError(error.message));\n  }\n};\n"]},"metadata":{},"sourceType":"module"}