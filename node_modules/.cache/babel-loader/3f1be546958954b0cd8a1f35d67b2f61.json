{"ast":null,"code":"var _jsxFileName = \"/Users/marina/Frontend/projects/js-react-projects/goit-react-hw-06-phonebook/src/client/components/ContactList/ContactList.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport contactsActions from '../../../redux/contacts-actions';\nimport PropTypes from 'prop-types';\nimport ContactsListItem from '../ContactListItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ContactList({\n  contacts,\n  onDeleteContacts\n}) {\n  const contactElements = contacts.map(({\n    id,\n    ...props\n  }, idx) => /*#__PURE__*/_jsxDEV(ContactsListItem, { ...props,\n    onClick: () => onDeleteContacts(idx)\n  }, id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 7\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: contactElements\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n}\n\n_c = ContactList;\n;\n\nconst mapStateToProps = state => ({\n  contacts: state.contacts.items\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onClick: idx => dispatch(contactsActions.deleteContacts(idx))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired\n  }).isRequired),\n  onDeleteContacts: PropTypes.func.isRequired\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactList\");","map":{"version":3,"sources":["/Users/marina/Frontend/projects/js-react-projects/goit-react-hw-06-phonebook/src/client/components/ContactList/ContactList.jsx"],"names":["React","connect","contactsActions","PropTypes","ContactsListItem","ContactList","contacts","onDeleteContacts","contactElements","map","id","props","idx","mapStateToProps","state","items","mapDispatchToProps","dispatch","onClick","deleteContacts","propTypes","arrayOf","shape","string","isRequired","name","number","func"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,eAAP,MAA4B,iCAA5B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;;;AAMA,SAASC,WAAT,CAAqB;AAACC,EAAAA,QAAD;AAAWC,EAAAA;AAAX,CAArB,EAAmD;AACjD,QAAMC,eAAe,GAAGF,QAAQ,CAACG,GAAT,CAAa,CAAC;AAAEC,IAAAA,EAAF;AAAM,OAAGC;AAAT,GAAD,EAAmBC,GAAnB,kBACjC,QAAC,gBAAD,OAAgCD,KAAhC;AAAuC,IAAA,OAAO,EAAE,MAAKJ,gBAAgB,CAACK,GAAD;AAArE,KAAuBF,EAAvB;AAAA;AAAA;AAAA;AAAA,UADoB,CAAxB;AAKE,sBACI;AAAA,cACKF;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;KAXQH,W;AAWR;;AAED,MAAMQ,eAAe,GAAIC,KAAD,KAAY;AACjCR,EAAAA,QAAQ,EAAEQ,KAAK,CAACR,QAAN,CAAeS;AADQ,CAAZ,CAAxB;;AAKA,MAAMC,kBAAkB,GAAGC,QAAQ,KAAK;AACtCC,EAAAA,OAAO,EAAGN,GAAD,IAASK,QAAQ,CAAEf,eAAe,CAACiB,cAAhB,CAA+BP,GAA/B,CAAF;AADY,CAAL,CAAnC;;AAKA,eAAeX,OAAO,CAACY,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CX,WAA7C,CAAf;AAEAA,WAAW,CAACe,SAAZ,GAAwB;AACpBd,EAAAA,QAAQ,EAAEH,SAAS,CAACkB,OAAV,CACRlB,SAAS,CAACmB,KAAV,CAAgB;AACdZ,IAAAA,EAAE,EAAEP,SAAS,CAACoB,MAAV,CAAiBC,UADP;AAEdC,IAAAA,IAAI,EAAEtB,SAAS,CAACoB,MAAV,CAAiBC,UAFT;AAGdE,IAAAA,MAAM,EAAEvB,SAAS,CAACoB,MAAV,CAAiBC;AAHX,GAAhB,EAIGA,UALK,CADU;AAQpBjB,EAAAA,gBAAgB,EAAEJ,SAAS,CAACwB,IAAV,CAAeH;AARb,CAAxB","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport contactsActions from '../../../redux/contacts-actions'\nimport PropTypes from 'prop-types'\nimport ContactsListItem from '../ContactListItem'\n\n\n\n\n\nfunction ContactList({contacts, onDeleteContacts}) {\n  const contactElements = contacts.map(({ id, ...props }, idx) => (\n      <ContactsListItem key={id}  {...props} onClick={()=> onDeleteContacts(idx)}\n      />\n    ))\n        \n    return (\n        <ul>\n            {contactElements}\n        </ul>\n    )\n};\n\nconst mapStateToProps = (state) => ({\n   contacts: state.contacts.items,\n  \n})\n\nconst mapDispatchToProps = dispatch => ({\n  onClick: (idx) => dispatch (contactsActions.deleteContacts(idx))\n}) \n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n\nContactList.propTypes = {\n    contacts: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n      }).isRequired,\n    ),\n    onDeleteContacts: PropTypes.func.isRequired,\n  };\n  \n"]},"metadata":{},"sourceType":"module"}