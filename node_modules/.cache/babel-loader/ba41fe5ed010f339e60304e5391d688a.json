{"ast":null,"code":"var _jsxFileName = \"/Users/marina/Frontend/projects/js-react-projects/goit-react-hw-07-phonebook/src/client/components/ContactList/ContactList.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { deleteContact } from '../../../redux/contacts-actions';\nimport PropTypes from 'prop-types';\nimport ContactsListItem from '../ContactListItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ContactList({\n  contacts,\n  onDeleteContact\n}) {\n  const contactElements = contacts.map(({\n    id,\n    ...props\n  }, idx) => /*#__PURE__*/_jsxDEV(ContactsListItem, { ...props,\n    onClick: () => onDeleteContact(idx)\n  }, id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 7\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: contactElements\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 9\n  }, this);\n}\n\n_c = ContactList;\n;\n\nconst getVisibleContacts = (allContacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n  return allContacts.filter(({\n    name\n  }) => name.toLowerCase().includes(normalizedFilter));\n};\n\nconst mapStateToProps = ({\n  contacts: {\n    items,\n    filter\n  }\n}) => ({\n  contacts: getVisibleContacts(items, filter)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContact: idx => dispatch(deleteContact(idx))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired\n  }).isRequired),\n  onDeleteContact: PropTypes.func.isRequired\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactList\");","map":{"version":3,"sources":["/Users/marina/Frontend/projects/js-react-projects/goit-react-hw-07-phonebook/src/client/components/ContactList/ContactList.jsx"],"names":["React","connect","deleteContact","PropTypes","ContactsListItem","ContactList","contacts","onDeleteContact","contactElements","map","id","props","idx","getVisibleContacts","allContacts","filter","normalizedFilter","toLowerCase","name","includes","mapStateToProps","items","mapDispatchToProps","dispatch","propTypes","arrayOf","shape","string","isRequired","number","func"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAAQC,aAAR,QAA4B,iCAA5B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;;;AAIA,SAASC,WAAT,CAAqB;AAACC,EAAAA,QAAD;AAAWC,EAAAA;AAAX,CAArB,EAAkD;AAChD,QAAMC,eAAe,GAAGF,QAAQ,CAACG,GAAT,CAAa,CAAC;AAAEC,IAAAA,EAAF;AAAM,OAAGC;AAAT,GAAD,EAAmBC,GAAnB,kBACjC,QAAC,gBAAD,OAAgCD,KAAhC;AAAuC,IAAA,OAAO,EAAE,MAAKJ,eAAe,CAACK,GAAD;AAApE,KAAuBF,EAAvB;AAAA;AAAA;AAAA;AAAA,UADoB,CAAxB;AAKE,sBACI;AAAA,cACKF;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;KAXQH,W;AAWR;;AAED,MAAMQ,kBAAkB,GAAG,CAACC,WAAD,EAAcC,MAAd,KAAyB;AAClD,QAAMC,gBAAgB,GAAGD,MAAM,CAACE,WAAP,EAAzB;AACA,SAAOH,WAAW,CAACC,MAAZ,CAAmB,CAAC;AAAEG,IAAAA;AAAF,GAAD,KAAcA,IAAI,CAACD,WAAL,GAAmBE,QAAnB,CAA4BH,gBAA5B,CAAjC,CAAP;AAEC,CAJH;;AAMA,MAAMI,eAAe,GAAG,CAAC;AAAEd,EAAAA,QAAQ,EAAE;AAAEe,IAAAA,KAAF;AAASN,IAAAA;AAAT;AAAZ,CAAD,MAAsC;AAC1DT,EAAAA,QAAQ,EAAEO,kBAAkB,CAACQ,KAAD,EAAQN,MAAR;AAD8B,CAAtC,CAAxB;;AAMA,MAAMO,kBAAkB,GAAGC,QAAQ,KAAK;AACtChB,EAAAA,eAAe,EAAGK,GAAD,IAASW,QAAQ,CAAErB,aAAa,CAACU,GAAD,CAAf;AADI,CAAL,CAAnC;;AAKA,eAAeX,OAAO,CAACmB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CjB,WAA7C,CAAf;AAEAA,WAAW,CAACmB,SAAZ,GAAwB;AACpBlB,EAAAA,QAAQ,EAAEH,SAAS,CAACsB,OAAV,CACRtB,SAAS,CAACuB,KAAV,CAAgB;AACdhB,IAAAA,EAAE,EAAEP,SAAS,CAACwB,MAAV,CAAiBC,UADP;AAEdV,IAAAA,IAAI,EAAEf,SAAS,CAACwB,MAAV,CAAiBC,UAFT;AAGdC,IAAAA,MAAM,EAAE1B,SAAS,CAACwB,MAAV,CAAiBC;AAHX,GAAhB,EAIGA,UALK,CADU;AAQpBrB,EAAAA,eAAe,EAAEJ,SAAS,CAAC2B,IAAV,CAAeF;AARZ,CAAxB","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport {deleteContact} from '../../../redux/contacts-actions'\nimport PropTypes from 'prop-types'\nimport ContactsListItem from '../ContactListItem'\n\n\n\nfunction ContactList({contacts, onDeleteContact}) {\n  const contactElements = contacts.map(({ id, ...props }, idx) => (\n      <ContactsListItem key={id}  {...props} onClick={()=> onDeleteContact(idx)}\n      />\n    ))\n        \n    return (\n        <ul>\n            {contactElements}\n        </ul>\n    )\n};\n\nconst getVisibleContacts = (allContacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n  return allContacts.filter(({ name }) => name.toLowerCase().includes(normalizedFilter));\n  \n  };\n\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\n    contacts: getVisibleContacts(items, filter)\n})\n\n\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContact: (idx) => dispatch (deleteContact(idx))\n}) \n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n\nContactList.propTypes = {\n    contacts: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n      }).isRequired,\n    ),\n    onDeleteContact: PropTypes.func.isRequired,\n  };\n  \n"]},"metadata":{},"sourceType":"module"}