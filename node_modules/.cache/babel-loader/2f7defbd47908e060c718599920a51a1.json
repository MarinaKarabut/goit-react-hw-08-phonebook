{"ast":null,"code":"var _jsxFileName = \"/Users/marina/Frontend/projects/js-react-projects/goit-react-hw-06-phonebook/src/client/components/ContactList/ContactList.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport contactsActions from '../../../redux/contacts-actions';\nimport PropTypes from 'prop-types';\nimport ContactsListItem from '../ContactListItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ContactList({\n  contacts,\n  onDeleteContacts\n}) {\n  const contactElements = contacts.map(({\n    id,\n    ...props\n  }) => /*#__PURE__*/_jsxDEV(ContactsListItem, { ...props,\n    onClick: () => onDeleteContacts(id)\n  }, id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 7\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"ul\", {\n    children: contactElements\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 9\n  }, this);\n}\n\n_c = ContactList;\n;\n\nconst getVisibleContacts = (allContacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n  return allContacts.filter(({\n    name\n  }) => name.toLowerCase().includes(normalizedFilter));\n};\n\nconst mapStateToProps = ({\n  contacts: {\n    items,\n    filter\n  }\n}) => ({\n  contacts: getVisibleContacts(items, filter)\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContacts: id => dispatch(contactsActions.deleteContact(id))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired\n  }).isRequired),\n  onDeleteContacts: PropTypes.func.isRequired\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactList\");","map":{"version":3,"sources":["/Users/marina/Frontend/projects/js-react-projects/goit-react-hw-06-phonebook/src/client/components/ContactList/ContactList.jsx"],"names":["React","connect","contactsActions","PropTypes","ContactsListItem","ContactList","contacts","onDeleteContacts","contactElements","map","id","props","getVisibleContacts","allContacts","filter","normalizedFilter","toLowerCase","name","includes","mapStateToProps","items","mapDispatchToProps","dispatch","deleteContact","propTypes","arrayOf","shape","string","isRequired","number","func"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,eAAP,MAA4B,iCAA5B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;;;AAIA,SAASC,WAAT,CAAqB;AAACC,EAAAA,QAAD;AAAWC,EAAAA;AAAX,CAArB,EAAmD;AACjD,QAAMC,eAAe,GAAGF,QAAQ,CAACG,GAAT,CAAa,CAAC;AAAEC,IAAAA,EAAF;AAAM,OAAGC;AAAT,GAAD,kBACjC,QAAC,gBAAD,OAAgCA,KAAhC;AAAuC,IAAA,OAAO,EAAE,MAAKJ,gBAAgB,CAACG,EAAD;AAArE,KAAuBA,EAAvB;AAAA;AAAA;AAAA;AAAA,UADoB,CAAxB;AAKE,sBACI;AAAA,cACKF;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;KAXQH,W;AAWR;;AAED,MAAMO,kBAAkB,GAAG,CAACC,WAAD,EAAcC,MAAd,KAAyB;AAChD,QAAMC,gBAAgB,GAAGD,MAAM,CAACE,WAAP,EAAzB;AAEA,SAAOH,WAAW,CAACC,MAAZ,CAAmB,CAAC;AAACG,IAAAA;AAAD,GAAD,KAAYA,IAAI,CAACD,WAAL,GAAmBE,QAAnB,CAA4BH,gBAA5B,CAA/B,CAAP;AACD,CAJH;;AAMA,MAAMI,eAAe,GAAG,CAAC;AAAEb,EAAAA,QAAQ,EAAE;AAAEc,IAAAA,KAAF;AAASN,IAAAA;AAAT;AAAZ,CAAD,MAAoC;AAC1DR,EAAAA,QAAQ,EAAEM,kBAAkB,CAACQ,KAAD,EAAQN,MAAR;AAD8B,CAApC,CAAxB;;AAKA,MAAMO,kBAAkB,GAAGC,QAAQ,KAAK;AACtCf,EAAAA,gBAAgB,EAAGG,EAAD,IAAQY,QAAQ,CAAEpB,eAAe,CAACqB,aAAhB,CAA8Bb,EAA9B,CAAF;AADI,CAAL,CAAnC;;AAKA,eAAeT,OAAO,CAACkB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6ChB,WAA7C,CAAf;AAEAA,WAAW,CAACmB,SAAZ,GAAwB;AACpBlB,EAAAA,QAAQ,EAAEH,SAAS,CAACsB,OAAV,CACRtB,SAAS,CAACuB,KAAV,CAAgB;AACdhB,IAAAA,EAAE,EAAEP,SAAS,CAACwB,MAAV,CAAiBC,UADP;AAEdX,IAAAA,IAAI,EAAEd,SAAS,CAACwB,MAAV,CAAiBC,UAFT;AAGdC,IAAAA,MAAM,EAAE1B,SAAS,CAACwB,MAAV,CAAiBC;AAHX,GAAhB,EAIGA,UALK,CADU;AAQpBrB,EAAAA,gBAAgB,EAAEJ,SAAS,CAAC2B,IAAV,CAAeF;AARb,CAAxB","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport contactsActions from '../../../redux/contacts-actions'\nimport PropTypes from 'prop-types'\nimport ContactsListItem from '../ContactListItem'\n\n\n\nfunction ContactList({contacts, onDeleteContacts}) {\n  const contactElements = contacts.map(({ id, ...props }) => (\n      <ContactsListItem key={id}  {...props} onClick={()=> onDeleteContacts(id)}\n      />\n    ))\n        \n    return (\n        <ul>\n            {contactElements}\n        </ul>\n    )\n};\n\nconst getVisibleContacts = (allContacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    \n    return allContacts.filter(({name}) => name.toLowerCase().includes(normalizedFilter));\n  };\n\nconst mapStateToProps = ({ contacts: { items, filter}}) => ({\n  contacts: getVisibleContacts(items, filter)\n})\n\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContacts: (id) => dispatch (contactsActions.deleteContact(id))\n}) \n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n\nContactList.propTypes = {\n    contacts: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        number: PropTypes.string.isRequired,\n      }).isRequired,\n    ),\n    onDeleteContacts: PropTypes.func.isRequired,\n  };\n  \n"]},"metadata":{},"sourceType":"module"}